{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","state/todolists-reducer.ts","state/tasks-reducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","props","console","log","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Todolist","changeTodolistTitle","id","removeTodolist","Delete","addTask","tasks","map","t","key","className","isDone","Checkbox","checked","newIsDoneValue","changeTaskStatus","newValue","changeTaskTitle","removeTask","style","paddingTop","Button","filter","changeFilter","initialState","AppWithRedux","v1","todolists","useSelector","state","dispatch","useDispatch","todolistId","action","taskId","type","removeTaskAC","addTaskAC","changeStatus","changeTaskStatusAC","newTitle","changeTaskTitleAC","changeTodolistTitleAC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","padding","addTodolistAC","spacing","tl","allTodolistTasks","tasksForTodolist","item","Paper","rootReducer","combineReducers","stateCopy","newTasks","newTask","todolistTasks","task","find","copyState","todolist","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.cd21806c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormPropsType) {\r\n    console.log('AddItemForm is called')\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n}\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n}\r\n","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType} from './App';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {EditableSpan} from './EditableSpan';\r\nimport {Button, Checkbox, IconButton} from '@material-ui/core';\r\nimport {Delete} from '@material-ui/icons';\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id);\r\n    }\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id);\r\n    }\r\n    const changeTodolistTitle = (title: string) => {\r\n        props.changeTodolistTitle(props.id, title);\r\n    }\r\n\r\n    const onAllClickHandler = () => props.changeFilter(\"all\", props.id);\r\n    const onActiveClickHandler = () => props.changeFilter(\"active\", props.id);\r\n    const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id);\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                props.tasks.map(t => {\r\n                    const onClickHandler = () => props.removeTask(t.id, props.id)\r\n                    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        let newIsDoneValue = e.currentTarget.checked;\r\n                        props.changeTaskStatus(t.id, newIsDoneValue, props.id);\r\n                    }\r\n                    const onTitleChangeHandler = (newValue: string) => {\r\n                        props.changeTaskTitle(t.id, newValue, props.id);\r\n                    }\r\n\r\n                    return <div key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n                        <Checkbox\r\n                            checked={t.isDone}\r\n                            color=\"primary\"\r\n                            onChange={onChangeHandler}\r\n                        />\r\n                        <EditableSpan value={t.title} onChange={onTitleChangeHandler}/>\r\n                        <IconButton onClick={onClickHandler}>\r\n                            <Delete/>\r\n                        </IconButton>\r\n                    </div>\r\n                })\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: \"10px\"}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n\r\n","import {FilterValuesType, TodolistType} from '../App';\r\nimport {v1} from 'uuid';\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST',\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST',\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype ActionsType = RemoveTodolistActionType | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n\r\nconst initialState: Array<TodolistType> =  []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistType> = initialState, action: ActionsType): Array<TodolistType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id != action.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [{\r\n                id: action.todolistId,\r\n                title: action.title,\r\n                filter: 'all'\r\n            }, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(tl => tl.id === action.id);\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state]\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return { type: 'REMOVE-TODOLIST', id: todolistId}\r\n}\r\nexport const addTodolistAC = (title: string): AddTodolistActionType => {\r\n    return { type: 'ADD-TODOLIST', title: title, todolistId: v1()}\r\n}\r\nexport const changeTodolistTitleAC = (id: string, title: string): ChangeTodolistTitleActionType => {\r\n    return { type: 'CHANGE-TODOLIST-TITLE', id: id, title: title}\r\n}\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType): ChangeTodolistFilterActionType => {\r\n    return { type: 'CHANGE-TODOLIST-FILTER', id: id, filter: filter}\r\n}\r\n\r\n","import {TasksStateType} from '../App';\r\nimport {TaskType} from '../Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddTodolistActionType, RemoveTodolistActionType} from './todolists-reducer';\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK',\r\n    todolistId: string\r\n    taskId: string\r\n}\r\n\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK',\r\n    todolistId: string\r\n    title: string\r\n}\r\n\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS',\r\n    todolistId: string\r\n    taskId: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE',\r\n    todolistId: string\r\n    taskId: string\r\n    title: string\r\n}\r\n\r\ntype ActionsType = RemoveTaskActionType | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = tasks.filter(t => t.id != action.taskId);\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state}\r\n            const newTask: TaskType = {\r\n                id: v1(),\r\n                title: action.title,\r\n                isDone: false\r\n            }\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = [newTask, ...tasks];\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            let todolistTasks = state[action.todolistId];\r\n            // найдём нужную таску:\r\n            let task = todolistTasks.find(t => t.id === action.taskId);\r\n            //изменим таску, если она нашлась\r\n            if (task) {\r\n                task.isDone = action.isDone;\r\n            }\r\n            return ({...state});\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            let todolistTasks = state[action.todolistId];\r\n            // найдём нужную таску:\r\n            let task = todolistTasks.find(t => t.id === action.taskId);\r\n            //изменим таску, если она нашлась\r\n            if (task) {\r\n                task.title = action.title;\r\n            }\r\n            return ({...state});\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: []\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state};\r\n            delete copyState[action.id];\r\n            return copyState;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: 'REMOVE-TASK', taskId: taskId, todolistId: todolistId}\r\n}\r\nexport const addTaskAC = (title: string, todolistId: string): AddTaskActionType => {\r\n    return {type: 'ADD-TASK', title, todolistId}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todolistId: string): ChangeTaskStatusActionType => {\r\n    return {type: 'CHANGE-TASK-STATUS', isDone, todolistId, taskId}\r\n}\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\r\n    return {type: 'CHANGE-TASK-TITLE', title, todolistId, taskId}\r\n}\r\n\r\n","import React, {useReducer, useState} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from './Todolist';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from './AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC,\r\n    removeTodolistAC,\r\n    todolistsReducer\r\n} from './state/todolists-reducer';\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC, tasksReducer} from './state/tasks-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './state/store';\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction AppWithRedux() {\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch();\r\n    //deleting a task\r\n    function removeTask(id: string, todolistId: string) {\r\n        const action = removeTaskAC(id, todolistId);\r\n        dispatch(action);\r\n    }\r\n    //adding a task\r\n    function addTask(title: string, todolistId: string) {\r\n        const action = addTaskAC(title, todolistId);\r\n        dispatch(action);\r\n    }\r\n\r\n    function changeStatus(id: string, isDone: boolean, todolistId: string) {\r\n        const action = changeTaskStatusAC(id, isDone, todolistId);\r\n        dispatch(action);\r\n    }\r\n\r\n    function changeTaskTitle(id: string, newTitle: string, todolistId: string) {\r\n        const action = changeTaskTitleAC(id, newTitle, todolistId);\r\n        dispatch(action);\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value);\r\n        dispatch(action);\r\n    }\r\n\r\n    function removeTodolist(id: string) {\r\n        const action = removeTodolistAC(id);\r\n        dispatch(action);\r\n    }\r\n\r\n    function changeTodolistTitle(id: string, title: string) {\r\n        const action = changeTodolistTitleAC(id, title);\r\n        dispatch(action);\r\n    }\r\n\r\n    function addTodolist(title: string) {\r\n        const action = addTodolistAC(title);\r\n        dispatch(action);\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n                            let tasksForTodolist = allTodolistTasks;\r\n\r\n                            if (tl.filter === \"active\") {\r\n                                tasksForTodolist = allTodolistTasks.filter(t => t.isDone === false);\r\n                            }\r\n                            if (tl.filter === \"completed\") {\r\n                                tasksForTodolist = allTodolistTasks.filter(t => t.isDone === true);\r\n                            }\r\n\r\n                            return <Grid item key={tl.id}>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={tasksForTodolist}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todolistsReducer} from './todolists-reducer';\r\nimport {combineReducers, createStore} from 'redux';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from './AppWithRedux';\r\nimport {store} from './state/store';\r\nimport {Provider} from 'react-redux';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}