{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","seteditMode","activateEditMode","autoFocus","onBlur","onDoubleClick","Todolist","newTitleTodolist","id","removeTodolist","Delete","addTask","tasks","map","t","key","className","isDone","Checkbox","newIsDonevalue","checked","changeTaskStatus","newTitleTask","removeTask","Button","changeFilter","filter","App","todolistId1","v1","todolistId2","todolists","setTodoLists","setTasks","todolistId","task","find","todolist","tl","todolistTasks","changeStatus","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","style","padding","spacing","allTodolistTasks","tasksForTodolist","item","Paper","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"+UAQO,SAASA,EAAYC,GAA8B,IAAD,EAC7BC,mBAAS,IADoB,mBAChDC,EADgD,KACzCC,EADyC,OAE7BF,mBAAwB,MAFK,mBAEhDG,EAFgD,KAEzCC,EAFyC,KAgB/CC,EAAU,WACQ,IAAhBJ,EAAMK,QACNP,EAAMM,QAAQJ,GACdC,EAAS,KAETE,EAAS,sBAIjB,OACI,6BACI,kBAACG,EAAA,EAAD,CACIC,QAAQ,WACRC,MAAOR,EACPS,SAzBY,SAACC,GACrBT,EAASS,EAAEC,cAAcH,QAyBjBI,WAtBc,SAACF,GACvBP,EAAS,MACU,KAAfO,EAAEG,UACFT,KAoBIF,QAASA,EACTY,MAAM,QACNC,WAAYb,IAEhB,kBAACc,EAAA,EAAD,CAAYC,MAAM,UAAUC,QAASd,GACjC,kBAACe,EAAA,EAAD,Q,+BCrCT,SAASC,EAAatB,GAA+B,IAAD,EACzBC,oBAAS,GADgB,mBAClDsB,EADkD,KACxCC,EADwC,OAE/BvB,mBAASD,EAAMU,OAFgB,mBAElDR,EAFkD,KAE3CC,EAF2C,KAIjDsB,EAAmB,WACrBD,GAAaD,GACbvB,EAAMW,SAAST,IAMnB,OAAOqB,EACD,kBAACf,EAAA,EAAD,CACEE,MAAOR,EACPwB,WAAS,EACTC,OAAQF,EACRd,SATY,SAACC,GACjBT,EAASS,EAAEC,cAAcH,QASrBD,QAAQ,aAEV,0BAAMmB,cAAeH,GAAmBzB,EAAMU,OCDjD,SAASmB,EAAS7B,GAsBrB,OAAQ,6BACA,4BACI,kBAACsB,EAAD,CACIZ,MAAOV,EAAME,MACbS,SARC,SAACD,GACdV,EAAM8B,iBAAiBpB,EAAOV,EAAM+B,OAU5B,kBAACb,EAAA,EAAD,CAAYE,QAAS,kBAAMpB,EAAMgC,eAAehC,EAAM+B,MAClD,kBAACE,EAAA,EAAD,QAIR,kBAAClC,EAAD,CAAaO,QApBL,SAACJ,GACbF,EAAMkC,QAAQhC,EAAOF,EAAM+B,OAqBvB,6BACK/B,EAAMmC,MAAMC,KAAI,SAAAC,GAYb,OAAO,yBAAKC,IAAKD,EAAEN,GACRQ,UAAWF,EAAEG,OAAS,UAAY,IAEzC,kBAACC,EAAA,EAAD,CACI9B,SAbgB,SAACC,GACrB,IAAI8B,EAAiB9B,EAAEC,cAAc8B,QACrC3C,EAAM4C,iBAAiBP,EAAEN,GAAIW,EAAgB1C,EAAM+B,KAY/CY,QAASN,EAAEG,OACXrB,MAAM,YAEV,kBAACG,EAAD,CACIZ,MAAO2B,EAAEnC,MACTS,SAfS,SAACD,GACdV,EAAM6C,aAAanC,EAAOV,EAAM+B,GAAIM,EAAEN,OAiBtC,kBAACb,EAAA,EAAD,CAAYE,QAvBO,kBAAMpB,EAAM8C,WAAWT,EAAEN,GAAI/B,EAAM+B,MAwBlD,kBAACE,EAAA,EAAD,YAKhB,6BACI,kBAACc,EAAA,EAAD,CACI3B,QAnEU,WACtBpB,EAAMgD,aAAa,MAAOhD,EAAM+B,KAmEpBZ,MAAM,UACNV,QAA0B,QAAjBT,EAAMiD,OAAmB,WAAa,QAHnD,OAMA,kBAACF,EAAA,EAAD,CACI3B,QAtEa,WACzBpB,EAAMgD,aAAa,SAAUhD,EAAM+B,KAsEvBZ,MAAM,UACNV,QAA0B,WAAjBT,EAAMiD,OAAsB,WAAa,QAHtD,UAMA,kBAACF,EAAA,EAAD,CACI3B,QAzEgB,WAC5BpB,EAAMgD,aAAa,YAAahD,EAAM+B,KAyE1BZ,MAAM,YACNV,QAA0B,cAAjBT,EAAMiD,OAAyB,WAAa,QAHzD,e,0ECkFDC,MApKf,WAAgB,IAAD,EAEPC,EAAcC,eACdC,EAAcD,eAHP,EAKqBnD,mBAA8B,CAC1D,CACI8B,GAAIoB,EACJjD,MAAO,gBACP+C,OAAQ,OAEZ,CACIlB,GAAIsB,EACJnD,MAAO,cACP+C,OAAQ,SAdL,mBAKNK,EALM,KAKKC,EALL,OAkBatD,oBAAQ,mBAC3BkD,EAAc,CACX,CAACpB,GAAIqB,eAAMlD,MAAO,WAAYsC,QAAQ,GACtC,CAACT,GAAIqB,eAAMlD,MAAO,KAAMsC,QAAQ,GAChC,CAACT,GAAIqB,eAAMlD,MAAO,UAAWsC,QAAQ,GACrC,CAACT,GAAIqB,eAAMlD,MAAO,WAAYsC,QAAQ,GACtC,CAACT,GAAIqB,eAAMlD,MAAO,UAAWsC,QAAQ,KANb,cAQ3Ba,EAAc,CACX,CAACtB,GAAIqB,eAAMlD,MAAO,OAAQsC,QAAQ,GAClC,CAACT,GAAIqB,eAAMlD,MAAO,aAAcsC,QAAQ,GACxC,CAACT,GAAIqB,eAAMlD,MAAO,QAASsC,QAAQ,KAXX,IAlBrB,mBAkBNL,EAlBM,KAkBCqB,EAlBD,KAiCX,SAASX,EAAanC,EAAe+C,EAAoB1B,GACrD,IACI2B,EADgBvB,EAAMsB,GACDE,MAAK,SAAAtB,GAAC,OAAIA,EAAEN,KAAOA,KACxC2B,IACAA,EAAKxD,MAAQQ,EACb8C,EAAS,eAAIrB,KAIrB,SAASL,EAAiBpB,EAAe+C,GACrC,IAAIG,EAAWN,EAAUK,MAAK,SAAAtB,GAAC,OAAIA,EAAEN,KAAO0B,KACxCG,IACAA,EAAS1D,MAAQQ,EACjB6C,EAAa,YAAID,KAKzB,SAASN,EAAatC,EAAyB+C,GAC3C,IAAIG,EAAWN,EAAUK,MAAK,SAAAE,GAAE,OAAIA,EAAG9B,KAAO0B,KAC1CG,IACAA,EAASX,OAASvC,EAClB6C,EAAa,YAAID,KAKzB,SAASR,EAAWf,EAAY0B,GAC5B,IAAIK,EAAgB3B,EAAMsB,GAC1BtB,EAAMsB,GAAcK,EAAcb,QAAO,SAAAZ,GAAC,OAAIA,EAAEN,KAAOA,KACvDyB,EAAS,eAAIrB,IAIjB,SAASD,EAAQhC,EAAeuD,GAC5B,IAAIC,EAAO,CAAC3B,GAAIqB,eAAMlD,MAAOA,EAAOsC,QAAQ,GAExCsB,EAAgB3B,EAAMsB,GAE1BtB,EAAMsB,GAAN,CAAqBC,GAArB,mBAA8BI,IAE9BN,EAAS,eAAIrB,IAIjB,SAAS4B,EAAahC,EAAYS,EAAiBiB,GAC/C,IAEIC,EAFgBvB,EAAMsB,GAEDE,MAAK,SAAAtB,GAAC,OAAIA,EAAEN,KAAOA,KAExC2B,IACAA,EAAKlB,OAASA,EACdgB,EAAS,eAAIrB,KAIrB,SAASH,EAAeD,GACpBwB,EAAaD,EAAUL,QAAO,SAAAZ,GAAC,OAAIA,EAAEN,IAAMA,aACpCI,EAAMJ,GACbyB,EAAS,eAAIrB,IAiBjB,OACI,yBAAMI,UAAU,OACZ,kBAACyB,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,KACI,kBAAChD,EAAA,EAAD,CAAYiD,KAAK,QAAQhD,MAAM,UAAUiD,aAAW,QAChD,kBAACC,EAAA,EAAD,OAEJ,kBAACC,EAAA,EAAD,CAAY7D,QAAQ,MAApB,QAGA,kBAACsC,EAAA,EAAD,CAAQ5B,MAAM,WAAd,WAGR,kBAACoD,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,MAAO,CAACC,QAAS,SAC7B,kBAAC7E,EAAD,CAAaO,QA7B7B,SAAqBJ,GACjB,IAAI0D,EAAyB,CACzB7B,GAAIqB,eACJlD,MAAOA,EACP+C,OAAQ,OAEZM,EAAa,CAACK,GAAF,mBAAeN,KAC3BE,EAAS,2BACFrB,GADC,kBAEHyB,EAAS7B,GAAK,UAsBX,kBAAC0C,EAAA,EAAD,CAAMC,WAAS,EAACG,QAAS,GAEjBvB,EAAUlB,KAAI,SAAAyB,GACV,IAAIiB,EAAmB3C,EAAM0B,EAAG9B,IAC5BgD,EAAmBD,EASvB,MAPkB,WAAdjB,EAAGZ,SACH8B,EAAmBD,EAAiB7B,QAAO,SAAAZ,GAAC,OAAiB,IAAbA,EAAEG,WAEpC,cAAdqB,EAAGZ,SACH8B,EAAmBD,EAAiB7B,QAAO,SAAAZ,GAAC,OAAiB,IAAbA,EAAEG,WAG/C,kBAACiC,EAAA,EAAD,CAAMO,MAAI,GACb,kBAACC,EAAA,EAAD,CAAON,MAAO,CAACC,QAAS,SACpB,kBAAC/C,EAAD,CAAUS,IAAKuB,EAAG9B,GACRA,GAAI8B,EAAG9B,GACP7B,MAAO2D,EAAG3D,MACViC,MAAO4C,EACPjC,WAAYA,EACZE,aAAcA,EACdd,QAASA,EACTU,iBAAkBmB,EAClB/B,eAAgBA,EAChBa,aAAcA,EACdf,iBAAkBA,EAClBmB,OAAQY,EAAGZ,kBCtKrCiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SDqI5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA7F,GACL8F,QAAQ9F,MAAMA,EAAM+F,c","file":"static/js/main.f8c8bda3.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {Button, IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFromPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFromPropsType) {\r\n    let [title, setTitle] = useState(\"\");\r\n    let [error, setError] = useState<string | null>(null);\r\n\r\n    //Processing the input value in the \"input\"\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    //\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    const addItem = () => {\r\n        if (title.trim() != \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                variant=\"outlined\"\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                error={!!error}\r\n                label=\"Title\"\r\n                helperText={error}\r\n            />\r\n            <IconButton color=\"primary\" onClick={addItem}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport { TextField } from \"@material-ui/core\";\r\n\r\ntype PropsTypeEditableSpan = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: PropsTypeEditableSpan) {\r\n    let [editMode, seteditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value)\r\n\r\n    const activateEditMode = () => {\r\n        seteditMode(!editMode);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField\r\n            value={title}\r\n            autoFocus\r\n            onBlur={activateEditMode}\r\n            onChange={changeTitle}\r\n            variant=\"outlined\"\r\n        />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n}\r\n","import React, {ChangeEvent} from 'react';\r\nimport {FilterValuesType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\n\r\ntype TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\ntype PropsType = {\r\n    key: string\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, id: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    newTitleTask: (value: string, todolistId: string, id: string) => void\r\n    newTitleTodolist: (value: string, todolistId: string) => void\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n\r\n    //Return functions for filtering\r\n    const onClickAllHandler = () => {\r\n        props.changeFilter(\"all\", props.id)\r\n    }\r\n    const onClickActiveHandler = () => {\r\n        props.changeFilter(\"active\", props.id)\r\n    }\r\n    const onClickCompletedHandler = () => {\r\n        props.changeFilter(\"completed\", props.id)\r\n    }\r\n    //end\r\n\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.id)\r\n    }\r\n\r\n    const onChange = (value: string) => {\r\n        props.newTitleTodolist(value, props.id)\r\n    }\r\n\r\n    return (<div>\r\n            <h3>\r\n                <EditableSpan\r\n                    value={props.title}\r\n                    onChange={onChange}\r\n                />\r\n                {/*delete to-do list button*/}\r\n                <IconButton onClick={() => props.removeTodolist(props.id)}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n\r\n            <AddItemForm addItem={addTask}/>\r\n\r\n            <div>\r\n                {props.tasks.map(t => {\r\n\r\n                    const onClickHandler = () => props.removeTask(t.id, props.id);\r\n                    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        let newIsDonevalue = e.currentTarget.checked;\r\n                        props.changeTaskStatus(t.id, newIsDonevalue, props.id);\r\n                    };\r\n                    const onChange = (value: string) => {\r\n                        props.newTitleTask(value, props.id, t.id)\r\n                    }\r\n\r\n\r\n                    return <div key={t.id}\r\n                               className={t.isDone ? \"is-done\" : \"\"}\r\n                    >\r\n                        <Checkbox\r\n                            onChange={onChangeHandler}\r\n                            checked={t.isDone}\r\n                            color=\"primary\"\r\n                        />\r\n                        <EditableSpan\r\n                            value={t.title}\r\n                            onChange={onChange}\r\n                        />\r\n                        {/*delete task button*/}\r\n                        <IconButton onClick={onClickHandler}>\r\n                            <Delete/>\r\n                        </IconButton>\r\n                    </div>\r\n                })}\r\n            </div>\r\n            <div>\r\n                <Button\r\n                    onClick={onClickAllHandler}\r\n                    color=\"default\"\r\n                    variant={props.filter === \"all\" ? \"outlined\" : \"text\"}\r\n                >All\r\n                </Button>\r\n                <Button\r\n                    onClick={onClickActiveHandler}\r\n                    color=\"primary\"\r\n                    variant={props.filter === \"active\" ? \"outlined\" : \"text\"}\r\n                >Active\r\n                </Button>\r\n                <Button\r\n                    onClick={onClickCompletedHandler}\r\n                    color=\"secondary\"\r\n                    variant={props.filter === \"completed\" ? \"outlined\" : \"text\"}\r\n                >Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from \"./Todolist\";\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, IconButton, Toolbar, Typography, Button, Container, Grid, Paper} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\n\r\ntype TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n\r\n    let [todolists, setTodoLists] = useState<Array<TodolistType>>([\r\n        {\r\n            id: todolistId1,\r\n            title: \"What to learn\",\r\n            filter: \"all\"\r\n        },\r\n        {\r\n            id: todolistId2,\r\n            title: \"What to byu\",\r\n            filter: \"all\"\r\n        }\r\n    ]);\r\n\r\n    let [tasks, setTasks] = useState<TasksStateType>({\r\n        [todolistId1]: [\r\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n            {id: v1(), title: \"JS\", isDone: true},\r\n            {id: v1(), title: \"ReactJS\", isDone: false},\r\n            {id: v1(), title: \"Rest API\", isDone: false},\r\n            {id: v1(), title: \"GraphQL\", isDone: false},\r\n        ],\r\n        [todolistId2]: [\r\n            {id: v1(), title: \"Milk\", isDone: true},\r\n            {id: v1(), title: \"React book\", isDone: true},\r\n            {id: v1(), title: \"Bread\", isDone: false},\r\n        ],\r\n    })\r\n\r\n    function newTitleTask(value: string, todolistId: string, id: string) {\r\n        let todolistTasks = tasks[todolistId];\r\n        let task = todolistTasks.find(t => t.id === id);\r\n        if (task) {\r\n            task.title = value;\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n\r\n    function newTitleTodolist(value: string, todolistId: string) {\r\n        let todolist = todolists.find(t => t.id === todolistId);\r\n        if (todolist) {\r\n            todolist.title = value;\r\n            setTodoLists([...todolists]);\r\n        }\r\n    }\r\n\r\n    //filter change\r\n    function changeFilter(value: FilterValuesType, todolistId: string) {\r\n        let todolist = todolists.find(tl => tl.id === todolistId);\r\n        if (todolist) {\r\n            todolist.filter = value;\r\n            setTodoLists([...todolists])\r\n        }\r\n    }\r\n\r\n    //deleting a task\r\n    function removeTask(id: string, todolistId: string) {\r\n        let todolistTasks = tasks[todolistId];\r\n        tasks[todolistId] = todolistTasks.filter(t => t.id !== id);\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    //adding a task\r\n    function addTask(title: string, todolistId: string) {\r\n        let task = {id: v1(), title: title, isDone: false};\r\n\r\n        let todolistTasks = tasks[todolistId];\r\n\r\n        tasks[todolistId] = [task, ...todolistTasks];\r\n\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    //change of status\r\n    function changeStatus(id: string, isDone: boolean, todolistId: string) {\r\n        let todolistTasks = tasks[todolistId]\r\n\r\n        let task = todolistTasks.find(t => t.id === id);\r\n\r\n        if (task) {\r\n            task.isDone = isDone;\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n\r\n    function removeTodolist(id: string) {\r\n        setTodoLists(todolists.filter(t => t.id != id));\r\n        delete tasks[id];\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function addTodolist(title: string) {\r\n        let todolist: TodolistType = {\r\n            id: v1(),\r\n            title: title,\r\n            filter: \"all\"\r\n        };\r\n        setTodoLists([todolist, ...todolists]);\r\n        setTasks({\r\n            ...tasks,\r\n            [todolist.id]: []\r\n        });\r\n    }\r\n\r\n    // @ts-ignore\r\n    return (\r\n        < div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n                            let tasksForTodolist = allTodolistTasks;\r\n\r\n                            if (tl.filter === \"active\") {\r\n                                tasksForTodolist = allTodolistTasks.filter(t => t.isDone === false)\r\n                            }\r\n                            if (tl.filter === \"completed\") {\r\n                                tasksForTodolist = allTodolistTasks.filter(t => t.isDone === true)\r\n                            }\r\n\r\n                            return <Grid item>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist key={tl.id}\r\n                                              id={tl.id}\r\n                                              title={tl.title}\r\n                                              tasks={tasksForTodolist}\r\n                                              removeTask={removeTask}\r\n                                              changeFilter={changeFilter}\r\n                                              addTask={addTask}\r\n                                              changeTaskStatus={changeStatus}\r\n                                              removeTodolist={removeTodolist}\r\n                                              newTitleTask={newTitleTask}\r\n                                              newTitleTodolist={newTitleTodolist}\r\n                                              filter={tl.filter}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}